{"version":3,"sources":["images/loader.gif","components/HouseListItem.js","components/HouseSingle.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","HouseListItem","props","react_default","a","createElement","className","onClick","selectHouse","house","id","name","HouseSingle","src","houseData","image","alt","incrementClicker","count","App","state","waitingForApi","houseList","houseSelected","apiError","apiErrorMessage","componentDidMount","_this","getHouseList","setState","fetch","concat","then","results","json","catch","error","String","houseId","prevState","map","element","_this2","this","displayHouseList","index","HouseListItem_HouseListItem","key","Loader","width","height","style","display","HouseSingle_HouseSingle","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"+EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,6QCGzB,SAASC,EAAeC,GACrC,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBAAkBC,QAAS,WAAOL,EAAMM,YAAYN,EAAMO,MAAMC,MAC7EP,EAAAC,EAAAC,cAAA,KAAGC,UAAU,oBAAoBJ,EAAMO,MAAME,aCHpC,SAASC,EAAYV,GAClC,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACbH,EAAAC,EAAAC,cAAA,OACEC,UAAU,YACVO,IAAKX,EAAMY,UAAUC,MACrBC,IAAI,kBACJT,QAAS,WAAQL,EAAMe,iBAAiBf,EAAMY,UAAUJ,OAE1DP,EAAAC,EAAAC,cAAA,UAAKH,EAAMY,UAAUH,MACrBR,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBAAf,WAAwCJ,EAAMY,UAAUI,mCCyFjDC,6MAhGbC,MAAQ,CACNC,eAAe,EACfC,UAAW,GACXC,cAAe,EACfC,UAAU,EACVC,gBAAiB,MAGnBC,kBAAoB,WAClBC,EAAKC,kBAIPA,aAAe,WACbD,EAAKE,SAAS,CACZR,eAAe,IAKjBS,MAAK,GAAAC,OAFY,yCAEZA,OAHU,mDAIZC,KAAK,SAAAC,GAAO,OAAIA,EAAQC,SACxBF,KAAK,SAAAC,GACJN,EAAKE,SAAS,CACZP,UAAWW,EACXZ,eAAe,MAGlBc,MAAM,SAAAC,GACLT,EAAKE,SAAS,CACZL,UAAU,EACVC,gBAAiBY,OAAOD,UAMhC5B,YAAc,SAAC8B,GACbX,EAAKE,SAAS,CACZN,cAAee,OAKnBrB,iBAAmB,SAACqB,GAClBX,EAAKE,SAAS,SAAAU,GASZ,MAAO,CACLjB,UATiBiB,EAAUjB,UAAUkB,IAAI,SAAAC,GAEzC,OAAGA,EAAQ/B,KAAO4B,GAChBG,EAAQvB,QACDuB,GAEFA,gFAQH,IAAAC,EAAAC,KACJC,EAAmBD,KAAKvB,MAAME,UAAUkB,IAAI,SAAC/B,EAAOoC,GACtD,OACE1C,EAAAC,EAAAC,cAACyC,EAAD,CAAerC,MAAOA,EAAOsC,IAAKF,EAAOrC,YAAakC,EAAKlC,gBAK/D,OAAGmC,KAAKvB,MAAMC,cAEVlB,EAAAC,EAAAC,cAAA,YACEF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBAAmBO,IAAKmC,IAAQhC,IAAI,8BAA8BiC,MAAM,MAAMC,OAAO,SAGtG/C,EAAAC,EAAAC,cAAA,KAAGC,UAAU,kBAAkB6C,MAAO,CAACC,SAAUT,KAAKvB,MAAMI,UAAY,SAAxE,sCACsCmB,KAAKvB,MAAMK,kBAOrDtB,EAAAC,EAAAC,cAAA,YACEF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACZsC,GAGHzC,EAAAC,EAAAC,cAACgD,EAAD,CAAavC,UAAW6B,KAAKvB,MAAME,UAAUqB,KAAKvB,MAAMG,cAAgB,GAAIN,iBAAkB0B,KAAK1B,4BA1F3FqC,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO1D,EAAAC,EAAAC,cAACyD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMnC,KAAK,SAAAoC,GACjCA,EAAaC","file":"static/js/main.ef600932.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/loader.7ba725da.gif\";","import React from 'react'\r\nimport '../styles/HouseListItem.scss'\r\n\r\nexport default function HouseListItem (props) {\r\n  return (\r\n    <div className=\"house-list-item\" onClick={() => {props.selectHouse(props.house.id)}}>\r\n      <p className=\"house-list-title\">{props.house.name}</p>\r\n    </div>\r\n  )\r\n}","import React from 'react'\r\nimport '../styles/HouseSingle.scss'\r\n\r\nexport default function HouseSingle(props) {\r\n  return (\r\n    <div className=\"house-single\">\r\n      <div className=\"house\">\r\n        <img\r\n          className=\"house-img\"\r\n          src={props.houseData.image}\r\n          alt=\"Requested house\"\r\n          onClick={() => { props.incrementClicker(props.houseData.id) }}\r\n        />\r\n        <h2>{props.houseData.name}</h2>\r\n        <div className=\"house-counter\">Clicks: {props.houseData.count}</div>\r\n      </div>\r\n    </div>\r\n  )\r\n}","import React, { Component } from 'react';\nimport HouseListItem from './components/HouseListItem'\nimport HouseSingle from './components/HouseSingle'\nimport './App.scss';\nimport Loader from './images/loader.gif'\n\nclass App extends Component {\n  state = {\n    waitingForApi: true,\n    houseList: [],\n    houseSelected: 1,\n    apiError: false,\n    apiErrorMessage: ''\n  }\n\n  componentDidMount = () => {\n    this.getHouseList()\n  }\n\n  // Function that obtains the house list from the provided API, and stores it in the app state.\n  getHouseList = () => {\n    this.setState({\n      waitingForApi: true\n    })\n    const apiUrl = 'http://te-testapp.azurewebsites.net/api/House/'\n    const proxyUrl = 'https://proxy-requests.herokuapp.com/'\n    // Using a proxy for this API call because the response header doesnt allow cross origin resource sharing\n    fetch(`${proxyUrl}${apiUrl}`)\n      .then(results => results.json())\n      .then(results => {\n        this.setState({\n          houseList: results,\n          waitingForApi: false\n        })\n      })\n      .catch(error => {\n        this.setState({\n          apiError: true,\n          apiErrorMessage: String(error)\n        })\n      })\n  }\n\n  // When the user clicks on a house name in the house list, it is set as the selected house by this function\n  selectHouse = (houseId) => {\n    this.setState({\n      houseSelected: houseId\n    })\n  }\n\n  // Increments the counter for the house selected by the houseId\n  incrementClicker = (houseId) => {\n    this.setState(prevState => {\n      let newHouseList = prevState.houseList.map(element => {\n        // If the element id matches the parameter house id, the count property gets incremented, otherwise the map function returns the original element\n        if(element.id === houseId) {\n          element.count++\n          return element\n        }\n        return element\n      })\n      return {\n        houseList: newHouseList\n      }\n    })\n  }\n\n  render () {\n    let displayHouseList = this.state.houseList.map((house, index) => {\n      return (\n        <HouseListItem house={house} key={index} selectHouse={this.selectHouse}/>\n      )\n    })\n\n    // Until the API call returns data, the app displays a loader\n    if(this.state.waitingForApi) {\n      return (\n        <main>\n          <div className=\"house-app\">\n            <img className=\"house-app-loader\" src={Loader} alt=\"Waiting for server response\" width=\"100\" height=\"100\"/>\n          </div>\n          {/* Only shows the error message if the API call catches an error */}\n          <p className=\"house-app-error\" style={{display: !this.state.apiError && \"none\"}}>\n            Cannot connect to remote resource. {this.state.apiErrorMessage}\n          </p>\n        </main>\n      )\n    }\n\n    return (\n      <main>\n        <div className=\"house-app\">\n          <div className=\"house-list\">\n            {displayHouseList}\n          </div>\n\n          <HouseSingle houseData={this.state.houseList[this.state.houseSelected - 1]} incrementClicker={this.incrementClicker} />\n        </div>\n      </main>\n    )\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}